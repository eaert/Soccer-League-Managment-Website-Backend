openapi: 3.0.0
info:
  description: This is a simple API
  version: "1.0.0"
  title: League Management API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: admins
    description: Secured Admin-only calls
  - name: developers
    description: Operations available to regular developers
paths:
  /Register: #updated
    post:
      tags:
        - Auth
      summary: A new user rom the client is added to the server.
      description: A JSON object contains all the details about the new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Inventory item to add
      responses:
        '201':
          description: A new user has been added
        '400':
          description: Wrong inpute parameters
  /Login:
    post:
      tags:
        - Auth
      summary: Post User Data to Auth.
      description: Post Username and password from client to Auth.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
        description: Inventory item to add
      responses:
        '201':
          description: Successfuly Signin.
          content:
            application/json:
              schema:
                type: integer
        '400':
          description: Username or Password is wrong.
  /Logout:
    post:
      tags:
        - Auth
      summary: Logout User from the Web
      description: Logout User from Web, remove cookie
      responses:
        '201':
          description: Successfuly Logout.
        '400':
          description: Logout failed.
  /leagues/getDetails:
    get:
      tags:
        - League
      summary: Get League Details.
      description: Get League Details from outsider API.
      responses:
        '200':
          description: Successfuly return League Details.
          content:
            application/json:
              schema:
                type: object
        '404':
          description: An Error been Accur.
  /users/favoritePlayers:
    post:
      tags:
        - User
      summary: A new player rom the client is added to the server.
      description: A JSON object contains all the details about the new player.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                player_id:
                  type: string
        description: Inventory item to add
      responses:
        '201':
          description: A new player has been added
        '400':
          description: Wrong inpute parameters
  /users/favoriteTeams:
    post:
      tags:
        - User
      summary: A new team rom the client is added to the server.
      description: A JSON object contains all the details about the new team.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                team_id:
                  type: string
        description: Inventory item to add
      responses:
        '201':
          description: A new team has been added
        '400':
          description: Wrong inpute parameters
  /users/favoriteGames:
    post:
      tags:
        - User
      summary: A new game rom the client is added to the server.
      description: A JSON object contains all the details about the new game.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                game_id:
                  type: string
        description: Inventory item to add
      responses:
        '201':
          description: A new game has been added
        '400':
          description: Wrong inpute parameters
  /users/favoriteTeams/:username:
    get:
      tags:
        - User
      summary: Get User Teams.
      description: Get User from client and return his Teams.
      responses:
        '200':
          description: Successfuly return User's Teams.
          content:
            application/json:
              schema:
                type: array
        '404':
          description: User doesn't have Teams.
  /users/favoritePlayers/:username:
    get:
      tags:
        - User
      summary: Get User Players.
      description: Get User from client and return his Players.
      responses:
        '200':
          description: Successfuly return Use's Players.
          content:
            application/json:
              schema:
                type: array
        '404':
          description: User doesn't have Players.
  /users/favoriteGames/:username:
    get:
      tags:
        - User
      summary: Get User Games.
      description: Get User from client and return his Games.
      responses:
        '200':
          description: Successfuly return User's Games.
          content:
            application/json:
              schema:
                type: array
        '404':
          description: User doesn't have Gamse.
  /users/Representative/addGame:
    post:
      tags:
        - Representative
      summary: A new game rom the client is added to the server.
      description: A JSON object contains all the details about the new game.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Game'
        description: Inventory item to add
      responses:
        '201':
          description: A new game has been added
        '400':
          description: Wrong inpute parameters
  /users/Representative/createGameLog:
    post:
      tags:
        - Representative
      summary: Create Leageue Game Log
      description: Receive Representative League ID and creat Game Log using League's mechanismPlacement.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                leagueID:
                  type: string
                  description: League ID
                  example: 12

      responses:
        '201':
          description: Game Log been created Successfuly.
        '400':
          description: League doesn't exists
  /users/Representative/updateScore:
    put:
      tags:
        - Representative
      summary: Update Game Score
      description: Update Game Score to the received one from the client.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                gameID:
                  type: integer
                homeTeamGoals:
                  type: integer
                awayTeamGoals:
                  type: integer
      responses:
        '201':
          description: The score been updated.
        '400':
          description: Game doesn't exist.
  /users/Representative/addEventCale:
    post:
      tags:
        - Representative
      summary: Add game Calendar.
      description: Game Calendar from the 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameEvent'
        description: Inventory item to add
      responses:
        '201':
          description: A new game calendar has been added to the game.
        '400':
          description: Wrong inpute
  /users/Representative/setReferee:
    put:
      tags:
        - Representative
      summary: Update Game's referee
      description: Update Game's referee to the received one from the client.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                gameID:
                  type: integer
                referee:
                  type: integer
      responses:
        '201':
          description: The referee been updated.
        '400':
          description: Game doesn't exist.
  /getHTML/{Page}:
    get:
      tags:
        - Web
      summary: Get Page HTML.
      description: Get Page's HTML when client press Link.
      parameters: 
        - in: path
          name: Page
          description: Page from the client.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfuly return Page's HTML.
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Page doesn't exists.
  /getJS/{Page}:
    get:
      tags:
        - Web
      summary: Get Page's JS.
      description: Get Page's JS when client press Link.
      parameters: 
        - in: path
          name: Page
          description: Page from the client.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfuly return Page's JS.
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Page doesn't exists.
  /getCSS/{Page}:
    get:
      tags:
        - Web
      summary: Get Page's CSS.
      description: Get Page's CSS when client press Link.
      parameters: 
        - in: path
          name: Page
          description: Page from the client.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfuly return Page's CSS.
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Page doesn't exists.
  /teams/teamFullDetails/:team:
    get:
      tags:
        - Team
      summary: Get Team full details.
      description: Get Team full details from outer API.
      parameters: 
        - in: path
          name: team
          description: team name from the client.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfuly return Team's details.
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Team doesn't exists.
  /teams/teamDetails/:team:
    get:
      tags:
        - Team
      summary: Get Team details.
      description: Get Team details from outer API.
      parameters: 
        - in: path
          name: team
          description: team name from the client.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfuly return Team's details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '404':
          description: Team doesn't exists.
  /teams/teamSchedule/:team:
    get:
      tags:
        - Team
      summary: Get Team schedule.
      description: Get Team schedule from outer DB.
      parameters: 
        - in: path
          name: team
          description: team name from the client.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfuly return Team's schedule.
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Team doesn't exists or doesn't have schedule.
  /games/gameDetails/:gameID:
    get:
      tags:
        - Game
      summary: Get Game.
      description: Get gameID from client and return his Teams.
      responses:
        '200':
          description: Successfuly return Game.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '404':
          description: Game doesn't exists.
  /players/playerDetails/:playerID:
    get:
      tags:
        - Player
      summary: Get Player.
      description: Get playerID from client and return his Teams.
      responses:
        '200':
          description: Successfuly return Game.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '404':
          description: Player doesn't exists.
  /coaches/coachDetails/:coachID:
    get:
      tags:
        - Coach
      summary: Get Coach.
      description: Get coachID from client and return his Teams.
      responses:
        '200':
          description: Successfuly return Coach.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coach'
        '404':
          description: Coach doesn't exists.
  /refereeDetails/:Referee_id:
    get:
      tags:
        - Referee
      summary: Get Referee.
      description: Get Referee_id from client and return his details.
      responses:
        '200':
          description: Successfuly return Referee.
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Referee doesn't exists.
  /search/:target:
    get:
      tags:
        - Search
      summary: Search target.
      description: Search target in the DB and return all results.
      responses:
        '200':
          description: Successfuly return results.
          content:
            application/json:
              schema:
                type: object
                properties:
                  freeSearch: 
                    type: string
                    description: input from user to search
                    example: Eran
                  precise:
                    type: string
                    description: specific type to search
                    example: player
        '404':
          description: An error been accur.
  /leagues/createLeague:
    post:
      tags:
        - League
      summary: Create League from user's variables
      description: Get variables from User and create new League from them.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/League'
      responses:
        '201':
          description: League been created Successfuly.
        '400':
          description: Wrong inpute
components:
  schemas:
    User:
      type:  object
      description: Model containing user info.
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 8
          description: Username must be between 3 to 9 and as letters only.
          example: Dolif
        firstname:
          type: string
          description: User's First Name
          example: Dolev
        lastname:
          type: string
          description: User's Last Name
          example: German
        country:
          type: string
          description: User's country
          example: USA
        password:
          type: string
          format: password
          minLength: 5
          maxLength: 10
          description: >
            password must contain 5 to 12 chars,
            and contains digits and chars.
          example: superME@1
        email:
          type: string
          format: email
          description: User's email
          example: google@google.com
        image-url:
          type: string
          format: URL
          description: URL for the user's image profile.
          example: https://cloudinary.com/USER
    LoginUser:
      type:  object
      description: Model containing Login info.
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 8
          description: Username must be between 3 to 9 and as letters only.
          example: Dolif
        password:
          type: string
          format: password
          minLength: 5
          maxLength: 10
          description: >
            password must contain 5 to 12 chars,
            and contains digits and chars.
          example: superME@1
    Team:
      type: object
      description: Model containing team info.
      properties:
        teamID:
          type: integer
        teamname:
          type: string
        shortname:
          type: string
        founded:
          type: integer
        logo:
          type: string
    Player:
      type: object
      description: Model containing player info.
      properties:
        playerID:
          type: integer
        firstname:
          type: string
        lastname:
          type: string
        playerteam:
          type: object
        position:
          type: string
        nation:
          type: string
        birthday:
          type: object
        country:
          type: string
        weight:
          type: integer
        height:
          type: integer
    Game:
      type: object
      description: Model containing game info.
      properties:
        gameID:
          type: integer
        time:
          type: object
        homeTeam:
          type: string
        awayTeam:
          type: string
        homeTeamGoals:
          type: integer
        awayTeamGoals:
          type: integer
        field:
          type: string
        referee:
          type: integer
    Coach:
      type: object
      description: Model containing coach info.
      properties:
        coachID:
          type: integer
        firstname:
          type: string
        lastname:
          type: string
        nation:
          type: string
        birthday:
          type: object
        country:
          type: string
    GameEvent:
      type: object
      properties:
        eventType:
          type: string
        gameMinute:
          type: integer
        gameID:
          type: integer
        playerID:
          type: integer
    Referee:
      type: object
      properties:
        refereeID:
          type: integer
          firstname:
            type: string
          lastname:
            type: string
          nation:
            type: string
          occupied:
            type: string
    League:
      type: object
      properties:
        leagueID:
          type: integer
        leagueName:
          type: string
        roundNum:
          type: integer
        mechanismPlacement:
          type: integer
        Representative:
          type: string
        